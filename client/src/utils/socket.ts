import io, { Socket } from 'socket.io-client';
import { appInfo } from '../constants/appInfo';
import axiosClient from '../apis/axiosClient';

// const SOCKET_SERVER = 'https://air-pollution-monitoring-app.onrender.com'; // Thay YOUR_PC_IP b·∫±ng ƒë·ªãa ch·ªâ IP m√°y ch·ªß
const SOCKET_SERVER = appInfo.BASE_URL; // Thay YOUR_PC_IP b·∫±ng ƒë·ªãa ch·ªâ IP m√°y ch·ªß
let socket:Socket| null = null;
interface SensorData {
  CO: string;
  airQuality: string;
  humidity: string;
  id: string;
  longitude: string;
  latitude: string;
  rain: string;
  temperature: string;
  dust: string;
  evalute: string,
  time: string,
}

export const initSocket = () => {
  if (!socket) {
    socket = io(SOCKET_SERVER);

    socket.on("connect", () => {
      console.log("üîå K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn WebSocket server", socket?.id);
      socket?.emit("connect","Ket noi thanh cong")
    });
    // L·∫Øng nghe ph·∫£n h·ªìi t·ª´ server
    socket.on("locationReceived", (data) => {
        console.log("üì© Server x√°c nh·∫≠n v·ªã tr√≠:", data);
    });

    socket.on("disconnect", () => {
      console.log("‚ùå M·∫•t k·∫øt n·ªëi WebSocket");
    });
    
  }
};

export const sendLocationToServer = (latitude: string, longitude: string) => {
  if (socket) {
    socket.emit("registerLocation", { latitude, longitude });
    console.log("üìç G·ª≠i v·ªã tr√≠:", latitude, longitude);
  }else {
    console.log("‚ö†Ô∏è Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
  }
};
// // L·∫Øng nghe d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ server
// export const listenToSensorData = (callback: (data: any) => void) => {
//     if (socket) {
//         socket.on("sensorData", (data) => {
//             console.log("üì• Nh·∫≠n d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi:", data);
//             callback(data);
//         });
//     }
// };
export const listenToSensorData = (callback: (data: any) => void,userEmail: string) => {

    if (!socket) {
        console.log("‚ö†Ô∏è Socket ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o!");
        return;
    }

    // X√≥a listener c≈© tr∆∞·ªõc khi ƒëƒÉng k√Ω l·∫°i (tr√°nh ƒëƒÉng k√Ω tr√πng l·∫∑p)
    socket.off("sensorData"); 

    // ƒêƒÉng k√Ω l·∫Øng nghe d·ªØ li·ªáu c·∫£m bi·∫øn
    socket.on("sensorData", (data) => {
        console.log("üì• Nh·∫≠n d·ªØ li·ªáu c·∫£m bi·∫øn m·ªõi:", data);
        if(data.evalute ==="Hazardous"){
          sendEmailAlert(userEmail, "C·∫£nh b√°o", "T√¨nh tr·∫°ng khu v·ª±c c·ªßa b·∫°n ƒë√£ v∆∞·ª£t m·ª©c an to√†n!!!")
          console.log("gui email den: ",userEmail);
          
        }
        callback(data);
    });

    console.log("‚úÖ L·∫Øng nghe d·ªØ li·ªáu c·∫£m bi·∫øn t·ª´ server...");
};
export const closeSocket = () => {
  if (socket) {
    socket.disconnect();
    socket = null;
  }
};
const sendEmailAlert = async (email: string, name:string, text:string) => {
    try {
        const api = `/api/user`
        const res  = await axiosClient.post(api,{
          email,
          name,
          text
        }); 
        // const response = await fetch(appInfo.BASE_URL+"/api/user", {
        //     method: "POST",
        //     headers: {
        //         "Content-Type": "application/json",
        //     },
        //     body: JSON.stringify({
        //         email,
        //         name,
        //         text,
        //     }),
        // });

        const result = res.data;
        console.log("üìß K·∫øt qu·∫£ g·ª≠i email:", result);
    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i email:", error);
    }
};